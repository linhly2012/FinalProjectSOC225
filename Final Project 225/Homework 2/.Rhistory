library(readr)
airbnb <- read_csv("~/OneDrive - UW/UW/Data and Society/Lab/Lab Presentations/April 5/data/airbnb.csv")
View(airbnb)
colnames(airbnb)
airbnb$market
View(airbnb)
select(airbnb, neighborhood, host_neighborhood)
library(tidyverse)
select(airbnb, neighborhood, host_neighborhood)
airbnb %>% select(neighbourhood, host_neighbourhood)
airbnb %>% select(neighbourhood, host_neighbourhood) %>% filter(neighbourhood!=host_neighbourhood)
airbnb %>% mutate(localhost = neighbourhood==host_neighbourhood)
airbnb <- airbnb %>% mutate(localhost = neighbourhood==host_neighbourhood)
airbnb$localhost
airbnb %>% group_by(localhost) %>% summarise(mean = mean(host_listings_count))
setwd("~/OneDrive - UW/UW/Data and Society/Lab/Lab Presentations/April 5/data")
setwd("~/OneDrive - UW/UW/Data and Society/Lab/Lab Homeworks/Homework 2")
airbnb <- read.csv('~/data/airbnb.csv')
library(tidyverse)
airbnb <- read.csv('~/data/airbnb.csv')
airbnb <- read.csv('~/Desktop/soc225/Homework 2/data/airbnb.csv')
View(airbnb)
unique(colnames)
unique(colnames(airbnb))
colnames(airbnb)
airbnb$host_neighbourhood
airbnb$neighbourhood
airbnb %>% filter(host_neighbourhood != neighbourhood)
(airbnb %>% filter(host_neighbourhood != neighbourhood) %>% nrow)
print(airbnb %>% filter(host_neighbourhood != neighbourhood) %>% nrow)
print(airbnb %>% filter(!host_neighbourhood %in% neighbourhood) %>% nrow)
test <- airbnb %>% select(host_neighbourhood, neighbourhood)
View(test)
print(airbnb %>% filter(host_neighbourhood in neighbourhood) %>% nrow)
print(airbnb %>% filter(host_neighbourhood %in% neighbourhood) %>% nrow)
??mean
??avg
??average
host_same_neighbor <- airbnb %>% filter(host_neighbourhood %in% neighbourhood
) %>% nrow %>% mean()
host_same_neighbor <- mean(airbnb %>% filter(host_neighbourhood %in% neighbourhood
) %>% nrow)
host_same_neighbor
host_same_neighbor <- airbnb %>% filter(host_neighbourhood %in% neighbourhood)
View(host_same_neighbor)
host_same_neighbor <- airbnb %>% filter(host_neighbourhood %in% neighbourhood) %>%
select(host_neighbourhood, neighbourhood)
View(host_same_neighbor)
#what should we do if, either of the column has an empty box
host_same_neighbor <- airbnb %>% filter(host_neighbourhood %in% neighbourhood)
colnames(host_same_neighbor)
same_neig_avg <- mean(host_same_neighbor %>% nrow())
same_neig_avg <- mean(host_same_neighbor %>% nrow(), na.rm=TRUE)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(plotly)
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
unemployment <- read.csv('data/unemployment-by-county-us/output.csv')
#only look at 'Total Homeless' measure it is more general and less specific
df <- homeless %>% filter(Measures == 'Total Homeless') %>% arrange(State)
#return the sum of the count of homeless of the state in that one year
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the sum of the count of homeless of the state in that one year
#because the sum value from the program did not return a correct value
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the dataframe of a state in each year, with the sum of total homeless
#from 2007 - 2016
totalHomelessMeasureState<- function(code) {
data <- df %>% filter(State == code)
val <- c()
for(i in years) {  #converted to array for index purpose
val <- c(val, addValue(data, i))
}
df <- data.frame(Year = years, State = code, Sum_Total_Homeless = val)
return(df)
}
l_state <- unique(df$State) #list of state
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
years <- sort(as.array(unique(homeless$Year)))
#global variable - because this will be use more often through out the file
years <- sort(as.array(unique(homeless$Year)))
#return the sum of the count of homeless of the state in that one year
#because the sum value from the program did not return a correct value
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the dataframe of a state in each year, with the sum of total homeless
#from 2007 - 2016
totalHomelessMeasureState<- function(code) {
data <- df %>% filter(State == code)
val <- c()
for(i in years) {  #converted to array for index purpose
val <- c(val, addValue(data, i))
}
df <- data.frame(Year = years, State = code, Sum_Total_Homeless = val)
return(df)
}
l_state <- unique(df$State) #list of state
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#only look at 'Total Homeless' measure it is more general and less specific
df <- homeless %>% filter(Measures == 'Total Homeless') %>% arrange(State)
#global variable - because this will be use more often through out the file
years <- sort(as.array(unique(homeless$Year)))
#return the sum of the count of homeless of the state in that one year
#because the sum value from the program did not return a correct value
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the dataframe of a state in each year, with the sum of total homeless
#from 2007 - 2016
totalHomelessMeasureState<- function(code) {
data <- df %>% filter(State == code)
val <- c()
for(i in years) {  #converted to array for index purpose
val <- c(val, addValue(data, i))
}
df <- data.frame(Year = years, State = code, Sum_Total_Homeless = val)
return(df)
}
l_state <- unique(df$State) #list of state
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count
clean_total_homeless_count
library(tidyverse)
library(dplyr)
#load data
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
#load data
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#only look at 'Total Homeless' measure it is more general and less specific
df <- homeless %>% filter(Measures == 'Total Homeless') %>% arrange(State)
#global variable - because this will be use more often through out the file
years <- sort(as.array(unique(homeless$Year)))
#return the sum of the count of homeless of the state in that one year
#because the sum value from the program did not return a correct value
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the dataframe of a state in each year, with the sum of total homeless
#from 2007 - 2016
totalHomelessMeasureState<- function(code) {
data <- df %>% filter(State == code)
val <- c()
for(i in years) {  #converted to array for index purpose
val <- c(val, addValue(data, i))
}
df <- data.frame(Year = years, State = code, Sum_Total_Homeless = val)
return(df)
}
l_state <- unique(df$State) #list of state
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count
years <- sort(as.array(unique(homeless$Year)))
#the function will take it a state name and filter the dataframe to only that state leve
#and then loops through each year to find the sum of those year in one dataframe for
#for one state
addSumRateState <- function(name) {
df <- unemploy_2007.2016 %>% filter(State == name)
res <- c()
for(i in years) {
year_df <- df %>% filter(Year == i)
res <- c(res,sum(year_df$Rate))
}
new_df <- data.frame(Year = years, State = name, Sum_Rate = res)
return(new_df)
}
#load data
unemployment <- read.csv('data/unemployment-by-county-us/output.csv')
#load data
unemployment <- read.csv('data/unemployment-by-county-us/output.csv')
#the function will take it a state name and filter the dataframe to only that state leve
#and then loops through each year to find the sum of those year in one dataframe for
#for one state
addSumRateState <- function(name) {
df <- unemploy_2007.2016 %>% filter(State == name)
res <- c()
for(i in years) {
year_df <- df %>% filter(Year == i)
res <- c(res,sum(year_df$Rate))
}
new_df <- data.frame(Year = years, State = name, Sum_Rate = res)
return(new_df)
}
#return a dataframe from 2007 to 2016 of each state unemployrate by year.
l_state_name <- sort(unique(unemploy_2007.2016$State))
clean_unemploy <- lapply(l_state_name, FUN=addSumRateState) %>% bind_rows()
#return a dataframe from 2007 to 2016 of each state unemployrate by year.
l_state_name <- sort(unique(unemploy_2007.2016$State))
#filter the data down to january level to match with the way homeless data was structure
unemploy_2007.2016 <- unemployment %>% filter(Year >= 2007, Month == 'January')
#the function will take it a state name and filter the dataframe to only that state leve
#and then loops through each year to find the sum of those year in one dataframe for
#for one state
addSumRateState <- function(name) {
df <- unemploy_2007.2016 %>% filter(State == name)
res <- c()
for(i in years) {
year_df <- df %>% filter(Year == i)
res <- c(res,sum(year_df$Rate))
}
new_df <- data.frame(Year = years, State = name, Sum_Rate = res)
return(new_df)
}
#return a dataframe from 2007 to 2016 of each state unemployrate by year.
l_state_name <- sort(unique(unemploy_2007.2016$State))
clean_unemploy <- lapply(l_state_name, FUN=addSumRateState) %>% bind_rows()
#droping these states from total homeless count because the unemployment
#does not has data about these states.
clean_total_homeless_count <- clean_total_homeless_count %>%
filter(!State %in% c("AK", "DC", "FL", "GA", "GU", "PR", "VI"))
#droping these states from total homeless count because the unemployment
#does not has data about these states.
clean_total_homeless_count <- clean_total_homeless_count %>%
filter(!State %in% c("AK", "DC", "FL", "GA", "GU", "PR", "VI"))
clean_total_homeless_count
clean_unemploy <- lapply(l_state_name, FUN=addSumRateState) %>% bind_rows()
clean_unemploy
#Join both data---------------------------------------------------------------------------------
#the reason a state-code data frame was create to make sure when merge
#homeless data and unemploy together, the data will go according to the state
#since the way the data structure is completely different
#concept for rename(df, new.name = old.name)
state_code <- data.frame(state.code = state.abb, state.nam = state.name) %>%
filter(!state.abb %in% c("DC", "FL", "AK", "GA", "GU", "PR", "VI"),
!state.name %in% c("Florida", "Alaska", "Georgia"))
#for merging purpose
clean_unemploy <- clean_unemploy %>% rename(state.nam = State)
clean_total_homeless_count <- clean_total_homeless_count %>% rename(state.code = State)
#merge homeless data with state code first
full_data <- merge(x= clean_total_homeless_count, y= state_code, all.x=TRUE)
#then merge unemploy after it - to prevent error
full_data <- merge(x = full_data, y = clean_unemploy) %>% arrange(state.nam)
full_data
library(tidyverse)
library(dplyr)
#load data
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
#load data
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#only look at 'Total Homeless' measure it is more general and less specific
df <- homeless %>% filter(Measures == 'Total Homeless') %>% arrange(State)
#load data
homeless <- read.csv('data/homelessness/2007-2016-Homelessnewss-USA.csv')
#change the year to actual year in numeric bc it is in 1/1/YYYY format
homeless$Year <- as.numeric(gsub("1/1/", "",as.character(homeless$Year)))
#only look at 'Total Homeless' measure it is more general and less specific
df <- homeless %>% filter(Measures == 'Total Homeless') %>% arrange(State)
#global variable - because this will be use more often through out the file
years <- sort(as.array(unique(homeless$Year)))
#return the sum of the count of homeless of the state in that one year
#because the sum value from the program did not return a correct value
addValue <- function(df.t , y) {
sumVal <- 0
dataYear <- df.t %>% filter(Year == y)
size <- dataYear %>% select(Count) %>% nrow
for(i in 0:size) {
#stripped any comma that was found in the count value
sumVal <- sum(sumVal + as.numeric(gsub(",","",dataYear$Count[i])))
}
return(sumVal)
}
#return the dataframe of a state in each year, with the sum of total homeless
#from 2007 - 2016
totalHomelessMeasureState<- function(code) {
data <- df %>% filter(State == code)
val <- c()
for(i in years) {  #converted to array for index purpose
val <- c(val, addValue(data, i))
}
df <- data.frame(Year = years, State = code, Sum_Total_Homeless = val)
return(df)
}
l_state <- unique(df$State) #list of state
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
clean_total_homeless_count <- lapply(l_state, FUN=totalHomelessMeasureState)  %>% bind_rows()
#droping these states from total homeless count because the unemployment
#does not has data about these states.
clean_total_homeless_count <- clean_total_homeless_count %>%
filter(!State %in% c("AK", "DC", "FL", "GA", "GU", "PR", "VI"))
#droping these states from total homeless count because the unemployment
#does not has data about these states.
clean_total_homeless_count <- clean_total_homeless_count %>%
filter(!State %in% c("AK", "DC", "FL", "GA", "GU", "PR", "VI"))
clean_total_homeless_count
#load data
unemployment <- read.csv('data/unemployment-by-county-us/output.csv')
#load data
unemployment <- read.csv('data/unemployment-by-county-us/output.csv')
#filter the data down to january level to match with the way homeless data was structure
unemploy_2007.2016 <- unemployment %>% filter(Year >= 2007, Month == 'January')
#the function will take it a state name and filter the dataframe to only that state leve
#and then loops through each year to find the sum of those year in one dataframe for
#for one state
addSumRateState <- function(name) {
df <- unemploy_2007.2016 %>% filter(State == name)
res <- c()
for(i in years) {
year_df <- df %>% filter(Year == i)
res <- c(res,sum(year_df$Rate))
}
new_df <- data.frame(Year = years, State = name, Sum_Rate = res)
return(new_df)
}
#return a dataframe from 2007 to 2016 of each state unemployrate by year.
l_state_name <- sort(unique(unemploy_2007.2016$State))
clean_unemploy <- lapply(l_state_name, FUN=addSumRateState) %>% bind_rows()
clean_unemploy <- lapply(l_state_name, FUN=addSumRateState) %>% bind_rows()
clean_unemploy
#Join both data---------------------------------------------------------------------------------
#the reason a state-code data frame was create to make sure when merge
#homeless data and unemploy together, the data will go according to the state
#since the way the data structure is completely different
#concept for rename(df, new.name = old.name)
state_code <- data.frame(state.code = state.abb, state.nam = state.name) %>%
filter(!state.abb %in% c("DC", "FL", "AK", "GA", "GU", "PR", "VI"),
!state.name %in% c("Florida", "Alaska", "Georgia"))
#for merging purpose
clean_unemploy <- clean_unemploy %>% rename(state.nam = State)
clean_total_homeless_count <- clean_total_homeless_count %>% rename(state.code = State)
#merge homeless data with state code first
full_data <- merge(x= clean_total_homeless_count, y= state_code, all.x=TRUE)
#then merge unemploy after it - to prevent error
full_data <- merge(x = full_data, y = clean_unemploy) %>% arrange(state.nam)
full_data
#return a df for average of the total homeless and unemploy rate
avg <- data %>% group_by(state.nam,
state.code
) %>% summarise(mean.homeless = mean(Sum_Total_Homeless),
mean.unemploy = mean(Sum_Unemploy_Rate))
avg
#return a df for average of the total homeless and unemploy rate
avg <- full_data %>% group_by(state.nam,
state.code
) %>% summarise(mean.homeless = mean(Sum_Total_Homeless),
mean.unemploy = mean(Sum_Unemploy_Rate))
#return a df for average of the total homeless and unemploy rate
library(dplyr)
avg <- full_data %>% group_by(state.nam,
state.code
) %>% summarise(mean.homeless = mean(Sum_Total_Homeless),
mean.unemploy = mean(Sum_Unemploy_Rate))
avg <- full_data %>% group_by(state.nam,
state.code
) %>% summarise(mean.homeless = mean(Sum_Total_Homeless),
mean.unemploy = mean(Sum_Rate))
avg
pop <- read.csv('/data/state_population.csv')
pop <- read.csv('/data/state_population.csv')
pop <- read.csv('./data/state_population.csv')
pop
View(pop)
pop <- read_csv('./data/state_population.csv')
pop <- read_csv('data/state_population.csv')
pop <- read.csv('data/state_population.csv')
pop
airbnb <- read_csv('data/airbnb.csv')
state_pop <- pop %>% group_by(STATE) %>% summarise(Population = sum(STATE))
library(dplyr)
state_pop <- pop %>% group_by(STATE) %>% summarise(Population = sum(STATE))
avg <- avg %>% mutate(ratio_unemploy_to_homeless = mean.unemploy / mean.homeless)
avg
library(tidyverse)
library(tidyverse)
airbnb <- read.csv('data/airbnb.csv')
airbnb
View(airbnb)
host_diff_neighbor <- airbnb %>% filter(!host_neighbourhood %in% neighbourhood)
library(tidyverse)
host_diff_neighbor <- airbnb %>% filter(!host_neighbourhood %in% neighbourhood)
colnames(airbnb)
library(tidyverse)
airbnb <- read.csv('data/airbnb.csv')
airbnb <- read.csv('data/airbnb.csv')
airbnb
airbnb <- read_csv('data/airbnb.csv')
airbnb
install.packages(c("data.table", "DBI", "foreign", "httpuv", "later", "MASS", "pillar", "sf", "sourcetools", "stringi", "yaml"))
install.packages("rmarkdown")
library(tidyverse)
airbnb <- read_csv('data/airbnb.csv')
airbnb
